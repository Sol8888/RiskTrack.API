// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiskTrack.Infrastructure.Data;

#nullable disable

namespace RiskTrack.API.Migrations
{
    [DbContext(typeof(RiskTrackDbContext))]
    [Migration("20250702011245_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_activo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"));

                    b.Property<int?>("AnnualCriticalVulnerabilities")
                        .HasColumnType("int")
                        .HasColumnName("vulnerabilidades_criticas_ano");

                    b.Property<decimal?>("AnnualLicenseCostUsd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("coste_licencia_anual_usd");

                    b.Property<int?>("AnnualSupportHours")
                        .HasColumnType("int")
                        .HasColumnName("horas_soporte_anual");

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_activo");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.Property<bool?>("ContainsPII")
                        .HasColumnType("bit")
                        .HasColumnName("contiene_pii");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<decimal?>("CriticalFlowPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("porcentaje_flujos_criticos");

                    b.Property<int?>("DataCorruptionErrors")
                        .HasColumnType("int")
                        .HasColumnName("errores_corrupcion_datos");

                    b.Property<string>("DataSource")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fuente_datos");

                    b.Property<decimal?>("EngineerHourlyRateUsd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("tarifa_ingeniero_hora_usd");

                    b.Property<int?>("MonthlyDowntimeMin")
                        .HasColumnType("int")
                        .HasColumnName("downtime_mensual_min");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_activo");

                    b.Property<int?>("OwnerTeamId")
                        .HasColumnType("int")
                        .HasColumnName("id_equipo_proprietario");

                    b.Property<decimal?>("RevenuePerMinuteUsd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ingresos_por_minuto_usd");

                    b.Property<long?>("TotalPiiRecords")
                        .HasColumnType("bigint")
                        .HasColumnName("registros_pii_totales");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_ultima_actualizacion");

                    b.HasKey("AssetId");

                    b.ToTable("Activos", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.AssetControl", b =>
                {
                    b.Property<int>("AssetControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_activo_control");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetControlId"));

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_aplicacion");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("id_activo");

                    b.Property<int?>("ControlMeasureId")
                        .HasColumnType("int")
                        .HasColumnName("id_control");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.HasKey("AssetControlId");

                    b.ToTable("Activos_controles", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.AssetType", b =>
                {
                    b.Property<int>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_activo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion_tipo");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_tipo");

                    b.HasKey("AssetTypeId");

                    b.ToTable("Tipos_activo", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_empresa");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RUC");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sector");

                    b.HasKey("CompanyId");

                    b.ToTable("Empresas", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.ControlMeasure", b =>
                {
                    b.Property<int>("ControlMeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_control");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ControlMeasureId"));

                    b.Property<decimal?>("AnnualCostUsd")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("costo_anual_usd");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion_control");

                    b.Property<decimal?>("EstimatedFrequencyReduction")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("reduccion_frecuencia_est");

                    b.Property<decimal?>("EstimatedMagnitudeReduction")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("reduccion_magnitud_est");

                    b.Property<int?>("ImplementationHours")
                        .HasColumnType("int")
                        .HasColumnName("horas_implementacion");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_control");

                    b.HasKey("ControlMeasureId");

                    b.ToTable("Controles", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_incidente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("id_activo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion_incidente");

                    b.Property<int?>("ImpactDurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duracion_impacto_min");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_incidente");

                    b.Property<int?>("ResolutionDurationHours")
                        .HasColumnType("int")
                        .HasColumnName("duracion_resolucion_horas");

                    b.HasKey("IncidentId");

                    b.ToTable("Incidentes", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.RiskAnalysis", b =>
                {
                    b.Property<int>("RiskAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_analysis");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RiskAnalysisId"));

                    b.Property<decimal?>("AleValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ALE_calculado");

                    b.Property<DateTime?>("AnalysisDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_analisis");

                    b.Property<string>("AnalystNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notas_analista");

                    b.Property<int?>("AssetId")
                        .HasColumnType("int")
                        .HasColumnName("id_activo");

                    b.Property<decimal?>("LefValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("LEF_calculado");

                    b.Property<decimal?>("LmValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("LM_calculado");

                    b.Property<decimal?>("SiValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SI_calculado");

                    b.Property<decimal?>("VnaValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("VNA_calculado");

                    b.HasKey("RiskAnalysisId");

                    b.ToTable("Analisis_riesgo", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_equipo_propetario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_contacto");

                    b.Property<string>("Leader")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lider_equipo");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_equipo");

                    b.HasKey("TeamId");

                    b.ToTable("Equipos", (string)null);
                });

            modelBuilder.Entity("RiskTrack.API.RiskTrack.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("correo");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contraseña");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rol");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre_usuario");

                    b.HasKey("UserId");

                    b.ToTable("Usuarios", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
